%% Truss 2D MATLAB Code
clc; clear; close all;

%% Givens
EA = 10; % lbs

%% Node coordinates (x,y)
node1 = [0, 0];
node2 = [15, 0];
node3 = [15, 20];
node4 = [0, 20];
nodes = [node1; node2; node3; node4];  

%% Element connectivity
elements = [1 2;
            1 3;
            4 2;
            2 3;
            4 3;
            1 4];

%% Global stiffness matrix (2 DOFs per node)
ndof = size(nodes,1)*2;  
K_global = zeros(ndof, ndof);

%% Assemble global stiffness
for e = 1:size(elements,1)
    n1 = elements(e,1);
    n2 = elements(e,2);

    % Local stiffness for this bar
    Ke = bar2DStiffness(EA, nodes(n1,:), nodes(n2,:));

    % DOF mapping for global K
    dofMap = [(n1-1)*2+1 : n1*2, (n2-1)*2+1 : n2*2];

    % Assembly
    K_global(dofMap,dofMap) = K_global(dofMap,dofMap) + Ke;
end

disp('Global stiffness matrix K:');
disp(K_global);

%% Example boundary conditions:
% Fix node1 and node4 (ux=0, uy=0 at both supports)
fixedDOFs = [1 2 7 8];
freeDOFs  = setdiff(1:ndof, fixedDOFs);

% Apply loads
F = zeros(ndof,1);
F((2-1)*2+2) = 1500;   % Fy at node2 = 1500 lbs
F((3-1)*2+2) = 1500;   % Fy at node3 = 1500 lbs

% Partition
K_ff = K_global(freeDOFs, freeDOFs);
F_f  = F(freeDOFs);

% Solve for unknown displacements
u = zeros(ndof,1);
u(freeDOFs) = K_ff \ F_f;

% Reaction forces
R = K_global*u - F;

disp('Nodal displacements (u):');
disp(u);

disp('Reaction forces (R):');
disp(R);

%% ---- Compute internal axial forces in each element ----
Ne = size(elements,1);
elementForces = zeros(Ne,1);

for e = 1:Ne
    n1 = elements(e,1);
    n2 = elements(e,2);

    % Coordinates
    x1 = nodes(n1,1); y1 = nodes(n1,2);
    x2 = nodes(n2,1); y2 = nodes(n2,2);
    dx = x2 - x1; dy = y2 - y1;
    L = sqrt(dx^2 + dy^2);
    cx = dx / L; cy = dy / L;

    % Element displacement vector [u_ix; u_iy; u_jx; u_jy]
    ue = [ u((n1-1)*2+1);
           u((n1-1)*2+2);
           u((n2-1)*2+1);
           u((n2-1)*2+2) ];

    % Axial extension
    delta = [-cx -cy cx cy] * ue;

    % Axial force (positive = tension)
    N = (EA/L) * delta;
    elementForces(e) = N;
end

disp('Element axial forces (positive = tension):');
for e = 1:Ne
    fprintf('Element %d (%d-%d): Force = %+10.4f lbs\n', ...
        e, elements(e,1), elements(e,2), elementForces(e));
end

%% Function for 2D bar stiffness
function K = bar2DStiffness(EA, node1, node2)
    % node1, node2 = [x,y]
    dx = node2(1)-node1(1);
    dy = node2(2)-node1(2);
    L = sqrt(dx^2 + dy^2);
    cx = dx / L;
    cy = dy / L;

    % 4x4 local stiffness matrix
    K = (EA/L) * [ ...
        cx^2,   cx*cy,  -cx^2,  -cx*cy;
        cx*cy,  cy^2,   -cx*cy, -cy^2;
       -cx^2,  -cx*cy,   cx^2,   cx*cy;
       -cx*cy, -cy^2,    cx*cy,  cy^2];
end
%Note generative AI (ChatGPT) was used during the coding process
